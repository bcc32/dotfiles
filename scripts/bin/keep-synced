#!/usr/bin/env ruby

require 'pathname'

# DirWatcher calls the block supplied to #each when a batch of change events is
# detected within the watched directory.
class DirWatcher
  FSWATCH_OPTS = %w[
    --one-per-batch
    --recursive
  ]

  def initialize(dir)
    @io = IO.popen(['fswatch', *FSWATCH_OPTS, dir.to_s])
  end

  def each
    @io.each { yield }
  end
end

# ChangeTracker calls sync when there are changes to be synchronized.  It
# assumes that: if sync is called, and there are no changes detected during the
# call to sync, then sync does not need to be called again to ensure
# synchronization.
#
# sync is called once at the beginning of #run_forever.
class ChangeTracker
  def initialize(watcher, &sync)
    @watcher = watcher
    @sync = sync
    @mutex = Mutex.new
    @cond = ConditionVariable.new
    @has_pending_changes = true
  end

  def run_forever
    thread1 = Thread.new do
      @watcher.each do
        @mutex.synchronize do
          @has_pending_changes = true
          @cond.signal
        end
      end
    end

    thread2 = Thread.new do
      loop do
        @mutex.synchronize do
          until @has_pending_changes
            @cond.wait(@mutex)
          end
          @has_pending_changes = false
        end

        @sync.call
      end
    end

    [thread1, thread2].each(&:join)
  end
end

src = ARGV[0]
dst = ARGV[1]

src = "#{src}/" unless src.end_with?("/")
dst = "#{dst}/" unless dst.end_with?("/")

src = Pathname.new(src)
dst = Pathname.new(dst)

RSYNC_OPTS = %w[
  -ai
  --del
  --stats
]

ChangeTracker.new(DirWatcher.new(src)) do
  puts "Detected changes, rsyncing '#{src}' to '#{dst}'"

  if File.directory?(src)
    system 'rsync', *RSYNC_OPTS, src.to_s, dst.to_s
  else
    puts "'#{src}' not found; skipping"
  end
end.run_forever
